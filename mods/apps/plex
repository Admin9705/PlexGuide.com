#!/bin/bash

##### Media Path: /pg/media
##### Port Number: 32400
##### Time Zone: America/New_York
##### AppData Path: /pg/appdata/plex
##### Plex Token: null
##### Version: latest

#### Token
token() {
    clear
    echo "Current Token: $plex_token"
    echo -e "Note: If the token is changed, the Docker container will be killed and requires manual deployment."
    echo -e "\nPlease enter your new Plex Token from https://plex.tv/claim"
    echo -e "Type [${GREEN}Z${NC}] to exit or to skip entering a token, type: ${RED}no-token${NC}"
    
    while true; do
        read -p "Plex Token: " new_token
        
        if [[ "${new_token,,}" == "z" ]]; then
            echo "Operation cancelled."
            return
        elif [[ "$new_token" == "no-token" || "$new_token" =~ ^claim ]]; then
            plex_token="$new_token"
            # Update the config file with the new token
            sed -i "s|^plex_token=.*|plex_token=$plex_token|" "$config_path"
            echo "Plex token updated successfully."
            
            # Stop and remove the Docker container
            docker stop "$app_name"
            docker rm "$app_name"
            echo "Docker container killed. You will need to redeploy manually."
            break
        else
            clear
            echo -e "${RED}Invalid input.${NC} Please enter a valid token, type ${RED}no-token${NC}, or type [${GREEN}Z${NC}] to exit."
        fi
    done
}

# Function to deploy the Docker container for the app
deploy_container() {
    # Specify the app name and config file path
    app_name=$1
    config_path="/pg/config/${app_name}.cfg"

    # Source the configuration file to get the appdata_path and app_name
    if [[ -f "$config_path" ]]; then
        source "$config_path"
    else
        echo "Error: Configuration file not found at $config_path."
        exit 1
    fi

    # Check and update the Plex token if necessary
    if [[ "$plex_token" == "null" || ! "$plex_token" =~ ^claim || "$plex_token" == "no-token" ]]; then
        clear
        echo -e "The Plex Token needs to be updated"
        echo -e "A. Please enter your Plex Token from https://plex.tv/claim"
        echo -e "B. To skip entering a token, type: ${RED}no-token${NC}\n"
        
        while true; do
            read -p "Plex Token: " new_token
            
            if [[ "$new_token" == "no-token" || "$new_token" =~ ^claim ]]; then
                plex_token="$new_token"
                # Update the config file with the new token
                sed -i "s|^plex_token=.*|plex_token=$plex_token|" "$config_path"
                break
            else
                clear
                echo -e "${RED}Invalid token format.${NC} Please ensure the token starts with 'claim-' or type ${RED}no-token${NC}."
                echo -e "Plex Token: "
            fi
        done
    fi

    # Run the Plex Docker container with the specified settings
    docker run -d \
      --name="${app_name}" \
      --net=host \
      -e PUID=1000 \
      -e PGID=1000 \
      -e TZ="${time_zone}" \
      -e VERSION=docker \
      -e PLEX_CLAIM="${plex_token}" \
      -v "${appdata_path}":/config \
      -v "${media_path}":/media \
      -v realdebrid:/torrents \
      --restart unless-stopped \
      lscr.io/linuxserver/plex:"${version}"

    # Verify the Docker container is running
    docker ps | grep "$app_name"
}

# Now you can call the function deploy_container when needed
# Example: deploy_container "$app_name"
