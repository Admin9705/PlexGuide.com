#!/bin/bash

# Function to check the Docker container status
check_deployment_status() {
    local app_name=$1
    local container_status=$(docker ps --filter "name=$app_name" --format "{{.Names}}")

    if [[ -n "$container_status" ]]; then
        echo -e "\033[0;32m[Deployed]\033[0m $app_name"  # Green
    else
        echo -e "\033[0;31m[Not Deployed]\033[0m $app_name"  # Red
    fi
}

# Function to get and store the port number
get_port_number() {
    local app_name=$1
    local config_path=$2
    local app_path=$3

    if ! grep -q '^port_number=' "$config_path"; then
        if [[ -f "$app_path" ]]; then
            port_number=$(grep -m 1 '# Default Port:' "$app_path" | awk '{print $NF}')
            if [[ -n "$port_number" ]]; then
                echo "port_number=${port_number}" >> "$config_path"
            else
                echo "Error: Default port not found in $app_path."
                exit 1
            fi
        else
            echo "Error: App script not found at $app_path."
            exit 1
        fi
    else
        source "$config_path"
    fi
}

# Function to change the port number
change_port_number() {
    local app_name=$1
    local config_path=$2
    local port_number=$3

    clear
    echo "Current Port: $port_number"
    read -p "Enter the new Port for $app_name (1-65000) or type [exit] to cancel: " new_port_number

    if [[ "$new_port_number" =~ ^[0-9]+$ ]] && ((new_port_number >= 1 && new_port_number <= 65000)); then
        port_number=$new_port_number
        sed -i "s/^port_number=.*/port_number=${port_number}/" "$config_path"
        echo "Port number updated to $port_number."

        redeploy_container "$app_name"
    elif [[ "$new_port_number" == "exit" ]]; then
        echo "No changes made."
    else
        echo "Invalid input. Please enter a number between 1 and 65000."
        read -p "Press Enter to continue..."
        change_port_number "$app_name" "$config_path" "$port_number"  # Recursive call to retry port change
    fi
}

# Function to validate the appdata path
validate_appdata_path() {
    local path=$1

    if [[ -d "$path" ]]; then
        return 0  # Path is valid and exists
    else
        mkdir -p "$path" 2>/dev/null
        if [[ $? -eq 0 ]]; then
            return 0  # Path successfully created
        else
            return 1  # Path is invalid and cannot be created
        fi
    fi
}

# Function to ensure the directory exists and is executable
ensure_directory_exists() {
    local path=$1

    if [[ ! -d "$path" ]]; then
        mkdir -p "$path"
        chmod +x "$path"
    fi
}

# Function to change the appdata path
change_appdata_path() {
    local app_name=$1
    local config_path=$2
    local appdata_path=$3

    clear
    echo "Current Appdata Path: $appdata_path"
    while true; do
        read -p "Enter the new Appdata Path for $app_name or type [exit] to cancel: " new_appdata_path

        if [[ "$new_appdata_path" == "exit" ]]; then
            echo "No changes made."
            return
        elif [[ -n "$new_appdata_path" ]]; then
            if validate_appdata_path "$new_appdata_path"; then
                handle_appdata_movement "$appdata_path" "$new_appdata_path" "$app_name" "$config_path"
                redeploy_container "$app_name"
                break  # Exit the loop once the path is successfully changed
            else
                echo "Invalid path. Please provide a valid path."
                read -p "Press Enter to continue..."
            fi
        else
            echo "Invalid input. Please provide a valid path."
            read -p "Press Enter to continue..."
        fi
    done
}

# Function to handle moving or deleting appdata
handle_appdata_movement() {
    local appdata_path=$1
    local new_appdata_path=$2
    local app_name=$3
    local config_path=$4

    if [ -z "$(ls -A "$appdata_path")" ]; then
        echo "The current appdata directory is empty. No data will be moved."
        update_appdata_path "$new_appdata_path" "$config_path"
    else
        echo ""  # Blank line for separation
        echo "Do you want to move the prior appdata to the new location?"
        echo "Failure to do so will result in prior data loss if the container starts with new data."
        echo ""  # Blank line for separation
        read -p "Type: yes / no / exit: " move_choice

        move_choice=$(echo "$move_choice" | tr '[:upper:]' '[:lower:]')  # Convert input to lowercase

        if [[ "$move_choice" == "exit" ]]; then
            echo "Operation aborted."
            return
        elif [[ "$move_choice" == "yes" ]]; then
            # Move data to the new location
            mkdir -p "$new_appdata_path"
            chmod +x "$new_appdata_path"
            mv "$appdata_path/"* "$new_appdata_path/"
            echo "Data moved to the new location: $new_appdata_path"
        elif [[ "$move_choice" == "no" ]]; then
            echo ""  # Blank line for separation
            read -p "Do you want to delete the old appdata? Type: yes / no: " delete_choice
            delete_choice=$(echo "$delete_choice" | tr '[:upper:]' '[:lower:]')  # Convert input to lowercase

            if [[ "$delete_choice" == "yes" ]]; then
                rm -rf "$appdata_path"
                echo "Old appdata at $appdata_path deleted."
            else
                echo "Old appdata retained."
            fi
        else
            echo "Invalid input. Operation aborted."
            return
        fi

        update_appdata_path "$new_appdata_path" "$config_path"
    fi
}

# Function to update appdata path in config
update_appdata_path() {
    local new_appdata_path=$1
    local config_path=$2

    sed -i "s|^appdata_path=.*|appdata_path=${new_appdata_path}|" "$config_path"
    echo "Appdata path updated to $new_appdata_path."
}

# Function to redeploy the app
redeploy_container() {
    local app_name=$1
    local container_status=$(docker ps --filter "name=$app_name" --format "{{.Names}}")

    if [[ -n "$container_status" ]]; then
        echo "Stopping and removing the existing container for $app_name ..."
        docker stop "$app_name"
        docker rm "$app_name"
        echo "Redeploying $app_name..."
        bash "/pg/apps/${app_name}" "$app_name"
    fi
}

# Function to deploy the app
deploy_app() {
    local app_name=$1
    local app_path=$2

    # Check if the app is deployed
    local container_status=$(docker ps --filter "name=$app_name" --format "{{.Names}}")

    if [[ -n "$container_status" ]]; then
        echo "Stopping and removing the existing container for $app_name ..."
        docker stop "$app_name"
        docker rm "$app_name"
    fi

    if [[ -f "$app_path" ]]; then
        echo "Deploying $app_name ..."
        bash "$app_path" "$app_name"

        # Notify the user that the app has been deployed and display the app name in blue
        echo ""
        echo -e "\033[0;34m${app_name}\033[0m has been deployed."
        read -p "Press Enter to continue..."
    else
        echo "Error: The app script for $app_name does not exist or is not executable."
        read -p "Press Enter to continue..."
    fi

    # Refresh the deployment status after deployment
    clear
    check_deployment_status "$app_name"
}
