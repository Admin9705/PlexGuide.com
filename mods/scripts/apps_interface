#!/bin/bash

# Source the functions from the external support script
source /pg/scripts/apps_interface_support

# Function: apps_interface
apps_interface() {
    local app_name=$1
    local config_path="/pg/config/${app_name}.cfg"
    local default_appdata_path="/pg/appdata/${app_name}"
    local app_path="/pg/apps/${app_name}"

    # Create config file if it doesn't exist
    if [[ ! -f "$config_path" ]]; then
        touch "$config_path"
    fi

    # Store the app_name in the config file
    if ! grep -q '^app_name=' "$config_path"; then
        echo "app_name=${app_name}" >> "$config_path"
    fi

    # Set default appdata path if not set in config
    if ! grep -q '^appdata_path=' "$config_path"; then
        echo "appdata_path=${default_appdata_path}" >> "$config_path"
    fi

    # Get the port number from the config or app script
    get_port_number "$app_name" "$config_path" "$app_path"

    # Read appdata_path and port_number from the config file
    source "$config_path"

    # Ensure the appdata directory exists and is executable
    ensure_directory_exists "$appdata_path"

    # Menu
    while true; do
        clear
        check_deployment_status "$app_name"  # Display the initial status
        echo ""
        echo "1) Appdata Path: $appdata_path"
        echo "3) Port: $port_number"
        echo "D) Deploy $app_name"
        echo "Z) Exit"
        echo ""

        read -p "Choose an option: " choice

        case $choice in
            1)
                change_appdata_path "$app_name" "$config_path" "$appdata_path"
                ;;
            3)
                change_port_number "$app_name" "$config_path" "$port_number"
                ;;
            D|d)
                deploy_app "$app_name" "$app_path"
                ;;
            Z|z)
                break
                ;;
            *)
                echo "Invalid option, please try again."
                read -p "Press Enter to continue..."
                ;;
        esac
    done
}
