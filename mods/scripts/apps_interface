#!/bin/bash

# ANSI color codes
RED="\033[0;31m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
NC="\033[0m" # No color

source /pg/scripts/expose_check.sh

# Function: check_deployment_status
check_deployment_status() {
    local container_status=$(docker ps --filter "name=^/${app_name}$" --format "{{.Names}}")

    if [[ "$container_status" == "$app_name" ]]; then
        echo -e "${GREEN}[Deployed]${NC} $app_name"
    else
        echo -e "${RED}[Not Deployed]${NC} $app_name"
    fi
}

# Function: parse_and_store_defaults
parse_and_store_defaults() {
    local app_name=$1
    local app_path="/pg/apps/${app_name}"
    local config_path="/pg/config/${app_name}.cfg"

    # Check if the config file exists, create it if not
    [[ ! -f "$config_path" ]] && touch "$config_path"

    # Read through the app script for lines starting with "#####"
    while IFS= read -r line; do
        if [[ "$line" =~ ^##### ]]; then
            # Remove leading "##### " and extract the key and value
            local trimmed_line=$(echo "$line" | sed 's/^##### //')
            local key=$(echo "$trimmed_line" | cut -d':' -f1 | tr '[:upper:]' '[:lower:]' | tr ' ' '_')
            local value=$(echo "$trimmed_line" | cut -d':' -f2 | xargs)

            # Check if the key already exists in the config file, add it if not
            if ! grep -q "^$key=" "$config_path"; then
                echo "$key=$value" >> "$config_path"
            fi
        fi
    done < "$app_path"
}

# Function: get_or_set_port_number
get_or_set_port_number() {
    if ! grep -q '^port_number=' "$config_path"; then
        port_number=$(awk '/# Default Port:/ {print $NF}' "$app_path")
        [[ -n "$port_number" ]] && echo "port_number=${port_number}" >> "$config_path" || {
            echo "Error: Default port not found in $app_path."
            exit 1
        }
    else
        source "$config_path"
    fi
}

# Function: validate_or_create_path
validate_or_create_path() {
    [[ -d "$1" ]] || mkdir -p "$1" || return 1
    return 0
}

# Function: stop_and_remove_app
stop_and_remove_app() {
    docker ps --filter "name=^/${app_name}$" --format "{{.Names}}" &> /dev/null
    if [[ $? -eq 0 ]]; then
        echo "Stopping and removing the existing container for $app_name ..."
        docker stop "$app_name" && docker rm "$app_name"
    else
        echo "Container $app_name is not running."
    fi
}

# Function: redeploy_app
redeploy_app() {
    echo "Deploying $app_name..."
    bash "$app_path" "$app_name"
    echo -e "${BLUE}${app_name}${NC} has been deployed."
    read -p "Press Enter to continue..."
}

# Function: change_port_number
change_port_number() {
    clear
    local port_code=$(printf "%04d" $((RANDOM % 10000)))
    echo "Current Port: $port_number"
    echo ""
    while true; do
        read -p "$(echo -e "Do you want to change the port number? Type [${RED}${port_code}${NC}] to proceed or [${GREEN}no${NC}] to cancel: ")" port_choice
        if [[ "$port_choice" == "$port_code" ]]; then
            break
        elif [[ "${port_choice,,}" == "no" ]]; then
            echo "Operation cancelled."
            return
        else
            echo -e "${RED}Invalid response.${NC} Please type [${RED}${port_code}${NC}] or [${GREEN}no${NC}]."
        fi
    done
    read -p "Enter the new Port for $app_name (1-65000) or type [exit] to cancel: " new_port_number

    if [[ "$new_port_number" =~ ^[0-9]+$ ]] && ((new_port_number >= 1 && new_port_number <= 65000)); then
        sed -i "s/^port_number=.*/port_number=${new_port_number}/" "$config_path"
        stop_and_remove_app
        redeploy_app
    elif [[ "$new_port_number" == "exit" ]]; then
        echo "No changes made."
    else
        echo "Invalid input. Please enter a number between 1 and 65000."
        read -p "Press Enter to continue..."
        change_port_number  # Recursive call to retry port change
    fi
}

# Function: move_or_delete_appdata
move_or_delete_appdata() {
    if [[ -z "$(ls -A "$appdata_path")" ]]; then
        echo "The current appdata directory is empty. No data will be moved."
    else
        read -p "Do you want to move the prior appdata to the new location? Type: yes / no / exit: " move_choice
        case ${move_choice,,} in  # Convert input to lowercase
            yes)
                mv "$appdata_path/"* "$1/" && echo "Data moved to the new location: $1"
                ;;
            no)
                read -p "Do you want to delete the old appdata? Type: yes / no: " delete_choice
                [[ ${delete_choice,,} == "yes" ]] && rm -rf "$appdata_path" && echo "Old appdata deleted."
                ;;
            exit)
                echo "Operation aborted."
                return
                ;;
            *)
                echo "Invalid input. Operation aborted."
                return
                ;;
        esac
    fi
    appdata_path=$1
    sed -i "s|^appdata_path=.*|appdata_path=${appdata_path}|" "$config_path"
}

# Function: change_appdata_path
change_appdata_path() {
    clear
    echo "Current Appdata Path: $appdata_path"
    echo ""
    local path_code=$(printf "%04d" $((RANDOM % 10000)))
    while true; do
        read -p "$(echo -e "Do you want to change the appdata path? Type [${RED}${path_code}${NC}] to proceed or [${GREEN}no${NC}] to cancel: ")" change_choice
        if [[ "$change_choice" == "$path_code" ]]; then
            break
        elif [[ "${change_choice,,}" == "no" ]]; then
            echo "Operation cancelled."
            return
        else
            echo -e "${RED}Invalid response.${NC} Please type [${RED}${path_code}${NC}] or [${GREEN}no${NC}]."
        fi
    done
    while true; do
        read -p "Enter the new Appdata Path for $app_name or type [exit] to cancel: " new_appdata_path

        if [[ "$new_appdata_path" == "exit" ]]; then
            echo "No changes made."
            return
        elif validate_or_create_path "$new_appdata_path"; then
            move_or_delete_appdata "$new_appdata_path"
            stop_and_remove_app
            redeploy_app
            break
        else
            echo "Invalid path. Please provide a valid path."
            read -p "Press Enter to continue..."
        fi
    done
}

# Initial setup: Create config file, store app_name, set default appdata path
apps_interface() {
    local app_name=$1
    local config_path="/pg/config/${app_name}.cfg"
    local default_appdata_path="/pg/appdata/${app_name}"
    local app_path="/pg/apps/${app_name}"

    # Parse and store defaults from the app script
    parse_and_store_defaults "$app_name"

    # Get the port number and ensure appdata directory exists
    get_or_set_port_number
    validate_or_create_path "$appdata_path"

    # Menu
    while true; do
        clear

        # Re-source the config file to refresh values
        source "$config_path"

        check_deployment_status  # Display the initial status
        expose_status=$(check_expose_status "$app_name")
        echo ""
        echo "D) Deploy $app_name"
        echo "A) Appdata Path: $appdata_path"
        echo "P) Port: $port_number"
        echo "C) Config File - Edit"
        echo "K) Kill Docker Container"
        echo "E) Exposed Port: $expose_status"
        echo "Y) Default the Config File"
        echo "Z) Exit"
        echo ""

        read -p "Choose an option: " choice

        case ${choice,,} in  # Convert input to lowercase
            d)
                clear
                local deploy_code=$(printf "%04d" $((RANDOM % 10000)))
                while true; do
                    read -p "$(echo -e "Deploy/Redeploy $app_name?\nType [${RED}${deploy_code}${NC}] to proceed or [${GREEN}no${NC}] to cancel: ")" deploy_choice
                    if [[ "$deploy_choice" == "$deploy_code" ]]; then
                        stop_and_remove_app
                        redeploy_app  # Deploy the container after stopping/removing
                        break
                    elif [[ "${deploy_choice,,}" == "no" ]]; then
                        echo "Operation cancelled."
                        break
                    else
                        echo -e "${RED}Invalid response.${NC} Please type [${RED}${deploy_code}${NC}] or [${GREEN}no${NC}]."
                    fi
                done
                ;;
            a)
                change_appdata_path
                ;;
            p)
                change_port_number
                ;;
            c)
                bash /pg/scripts/apps_config_edit.sh "$app_name" "$config_path"
                ;;
            k)
                stop_and_remove_app
                ;;
            y)
                reset_config_file
                ;;
            z)
                break
                ;;
            *)
                echo "Invalid option, please try again."
                read -p "Press Enter to continue..."
                ;;
        esac
    done
}
